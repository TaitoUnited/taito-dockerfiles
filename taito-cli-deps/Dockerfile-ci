FROM debian:stable-slim
MAINTAINER Taito United <support@taitounited.fi>

USER root
COPY . /taito-cli-deps
WORKDIR /tmp

# Install some basic stuff
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install \
      bash \
      procps \
      apt-transport-https \
      ca-certificates \
      software-properties-common && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install docker (required for executing CI/CD builds on container)
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install gnupg curl && \
    curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && \
      add-apt-repository \
      "deb [arch=amd64] https://download.docker.com/linux/debian \
      $(lsb_release -cs) \
      stable" && \
    apt-get -qqy update && \
    apt-get -qqy install docker-ce && \
    apt-get -qqy --purge remove gnupg curl && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install docker-compose (required for CI/CD tests)
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install curl && \
    curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && \
    chmod +x /usr/local/bin/docker-compose && \
    apt-get -qqy --purge remove curl && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install node.js
ENV NODEJS_VERSION 10.x
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install curl build-essential && \
    curl -sL https://deb.nodesource.com/setup_${NODEJS_VERSION} | bash - && \
    apt-get -qqy update && apt-get -qqy install nodejs && \
    apt-get -qqy --purge remove curl build-essential && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
RUN set -eux; \
    npm config set spin=false && \
    npm config set progress=false

# Install helm
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install curl && \
    curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get \
      > get_helm.sh && \
    chmod 700 get_helm.sh && \
    ./get_helm.sh && \
    rm ./get_helm.sh && \
    apt-get -qqy --purge remove curl && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install postgres and mysql client
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install postgresql-client default-mysql-client && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install sqitch
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install perl cpanminus libdbd-pg-perl libdatetime-perl libclone-perl \
      libperlio-utf8-strict-perl libhash-merge-perl && \
    cpanm --quiet --notest App::Sqitch && \
    apt-get -qqy --purge remove cpanminus && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install aws cli and aws-iam-authenticator
WORKDIR /tmp
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install curl unzip && \
    curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip" && \
    unzip awscli-bundle.zip && \
    ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws && \
    curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.12.7/2019-03-27/bin/linux/amd64/aws-iam-authenticator && \
    chmod +x ./aws-iam-authenticator && \
    mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator && \
    rm -rf awscli* && \
    apt-get -qqy --purge remove curl unzip && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install gcloud
# TODO create a separate gcloud image?
# TODO: openssh-client required?
ENV CLOUD_SDK_VERSION=251.0.0
ENV PATH "$PATH:/opt/google-cloud-sdk/bin/"
RUN set -eux; \
    apt-get -qqy update && apt-get install -qqy \
      curl \
      python-dev \
      python-setuptools \
      python-pip \
      lsb-release && \
    pip install -U crcmod && \
    export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)" && \
    echo "deb https://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" > \
      /etc/apt/sources.list.d/google-cloud-sdk.list && \
    curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add - && \
    apt-get update && \
    apt-get install -y google-cloud-sdk=${CLOUD_SDK_VERSION}-0 kubectl && \
    apt-get --purge remove -qqy \
      curl \
      python-dev \
      python-setuptools \
      python-pip \
      lsb-release && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install gcloud sql proxy
# TODO create a separate gcloud image?
RUN set -eux; \
    apt-get -qqy update && \
    apt-get -qqy install curl && \
    curl https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 \
      > cloud_sql_proxy && \
    chmod +x cloud_sql_proxy && \
    mv cloud_sql_proxy /usr/local/bin && \
    apt-get --purge remove -qqy curl && \
    apt-get -qqy --purge autoremove && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install bats for Taito CLI unit testing
RUN set -eux; \
    git clone https://github.com/bats-core/bats-core.git && \
    ./bats-core/install.sh /usr/local && \
    rm -rf bats-core

# Initialize root user
RUN /taito-cli-deps/tools/user-init.sh root

ENTRYPOINT ["bash"]
